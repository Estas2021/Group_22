{
	"info": {
		"_postman_id": "d21d1e7b-2d13-4b25-9745-56f8459c9624",
		"name": "HomeWork2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"pm.environment.set(\"token\", response.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Stas",
							"type": "text"
						},
						{
							"key": "password",
							"value": "lobby",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2) http://162.55.220.72:5005/user_info\r",
							"// req. (RAW JSON)\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"1. Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let response = pm.response.json();\r",
							"\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"person\",\r",
							"\t\t\"qa_salary_after_12_months\",\r",
							"\t\t\"qa_salary_after_6_months\",\r",
							"\t\t\"start_qa_salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"person\": {\r",
							"\t\t\t\"$id\": \"#root/person\", \r",
							"\t\t\t\"title\": \"Person\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"u_age\",\r",
							"\t\t\t\t\"u_name\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"u_age\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_age\", \r",
							"\t\t\t\t\t\"title\": \"U_age\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t95\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_name\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_name\", \r",
							"\t\t\t\t\t\"title\": \"U_name\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/person/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t4000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"qa_salary_after_12_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_12_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_12_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2900\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"qa_salary_after_6_months\": {\r",
							"\t\t\t\"$id\": \"#root/qa_salary_after_6_months\", \r",
							"\t\t\t\"title\": \"Qa_salary_after_6_months\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t2000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"start_qa_salary\": {\r",
							"\t\t\t\"$id\": \"#root/start_qa_salary\", \r",
							"\t\t\t\"title\": \"Start_qa_salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1000\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test(\"2. Check структура json в ответе\", () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let requestt = JSON.parse(request.data);\r",
							"\r",
							"\r",
							"pm.test(\"3. Check 'start_qa_salary':salary\", function () {\r",
							"    pm.expect(response.start_qa_salary).to.eql(requestt.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"3. Check 'qa_salary_after_6_months':salary * 2\", function () {\r",
							"    pm.expect(response.qa_salary_after_6_months).to.eql(requestt.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"3. Check 'qa_salary_after_12_months':salary * 2.9\", function () {\r",
							"    pm.expect(response.qa_salary_after_12_months).to.eql(requestt.salary * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"3. Check 'u_salary_1_5_year':salary * 4\", function () {\r",
							"    pm.expect(response.person.u_salary_1_5_year).to.eql(requestt.salary * 4);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", response.person.u_salary_1_5_year)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"age\": 95,\"name\": \"Valera\",\"salary\": 1000,\"auth_token\": \"{{token}}\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "New_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3) http://162.55.220.72:5005/new_data\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"1. Check status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"const schema = {\r",
							"\t\"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t99\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Johnny\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"type\": \"array\",\r",
							"\t\t\t\"minItems\": 1,\r",
							"            \"maxItems\": 3,\r",
							"        }\r",
							"\t}\r",
							"}\r",
							"\r",
							"pm.test(\"2. Check структура json в ответе\", () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let reqData = request.data;\r",
							"let response = pm.response.json();                    \r",
							"\r",
							"pm.test(\"3. Check_response.salary[0] = reqData.salary\", function () {\r",
							"    pm.expect(response.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// console.log('response =',response.salary[1] , 'request =', reqData.salary * 2)\r",
							"pm.test(\"3. Check_response.salary[1] = reqData.salary * 2\", function () {\r",
							"    pm.expect(+response.salary[1]).to.eql(reqData.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"3. Check_response.salary[2] = reqData.salary * 3\", function () {\r",
							"    pm.expect(+response.salary[2]).to.eql(reqData.salary * 3);\r",
							"});\r",
							"\r",
							"// // 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"4. Check_salary_2 > salary_1\", function () {\r",
							"    pm.expect(+response.salary[2]).to.greaterThan(+response.salary[1]);\r",
							"});\r",
							"\r",
							"pm.test(\"4. Check_salary_2 > salary_0\", function () {\r",
							"    pm.expect(+response.salary[2]).to.greaterThan(+response.salary[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"1. Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// // 2) Проверка структуры json в ответе.\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"daily_food\",\r",
							"\t\t\"daily_sleep\",\r",
							"\t\t\"name\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t99\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"daily_food\": {\r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t0.9\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"daily_sleep\": {\r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t187.5\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Johnny\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test(\"2. Check структура json в ответе\", () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let reqdata = request.data;\r",
							"let responsedata = pm.response.json();\r",
							"// console.log('request = ', reqdata.weight * 0.012, 'responsedata =', responsedata.daily_food)\r",
							"\r",
							"pm.test(\"3. Check_'daily_food': weight * 0.012\", function () {\r",
							"    pm.expect(responsedata.daily_food).to.eql(reqdata.weight * 0.012);\r",
							"});\r",
							"\r",
							"// console.log('request = ', reqdata.weight * 2.5, 'responsedata =', responsedata.daily_sleep)\r",
							"pm.test(\"3. Check_'daily_sleep': weight * 2.5\", function () {\r",
							"    pm.expect(responsedata.daily_sleep).to.eql(reqdata.weight * 2.5);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "{{weight}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5) http://162.55.220.72:5005/get_test_user\r",
							"// req.\r",
							"// POST\r",
							"// age: int\r",
							"// salary: int\r",
							"// name: str\r",
							"// auth_token\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"1. Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// // 2) Проверка структуры json в ответе.\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"age\",\r",
							"\t\t\"family\",\r",
							"\t\t\"name\",\r",
							"\t\t\"salary\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"age\": {\r",
							"\t\t\t\"$id\": \"#root/age\", \r",
							"\t\t\t\"title\": \"Age\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"99\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"family\": {\r",
							"\t\t\t\"$id\": \"#root/family\", \r",
							"\t\t\t\"title\": \"Family\", \r",
							"\t\t\t\"type\": \"object\",\r",
							"\t\t\t\"required\": [\r",
							"\t\t\t\t\"children\",\r",
							"\t\t\t\t\"u_salary_1_5_year\"\r",
							"\t\t\t],\r",
							"\t\t\t\"properties\": {\r",
							"\t\t\t\t\"children\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/children\", \r",
							"\t\t\t\t\t\"title\": \"Children\", \r",
							"\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\"default\": [],\r",
							"\t\t\t\t\t\"items\":{\r",
							"\t\t\t\t\t\t\"$id\": \"#root/family/children/items\", \r",
							"\t\t\t\t\t\t\"title\": \"Items\", \r",
							"\t\t\t\t\t\t\"type\": \"array\",\r",
							"\t\t\t\t\t\t\"default\": []\r",
							"\t\t\t\t\t}\r",
							"\t\t\t\t},\r",
							"\t\t\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\t\t\"$id\": \"#root/family/u_salary_1_5_year\", \r",
							"\t\t\t\t\t\"title\": \"U_salary_1_5_year\", \r",
							"\t\t\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\t\t\"examples\": [\r",
							"\t\t\t\t\t\t18000\r",
							"\t\t\t\t\t],\r",
							"\t\t\t\t\t\"default\": 0\r",
							"\t\t\t\t}\r",
							"\t\t\t}\r",
							"\t\t}\r",
							",\r",
							"\t\t\"name\": {\r",
							"\t\t\t\"$id\": \"#root/name\", \r",
							"\t\t\t\"title\": \"Name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Johnny\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"salary\": {\r",
							"\t\t\t\"$id\": \"#root/salary\", \r",
							"\t\t\t\"title\": \"Salary\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t4500\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t}\r",
							"\t}\r",
							"};\r",
							"\r",
							"pm.test(\"2. Check структура json в ответе\", () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// 3) Проверить что значение поля name = значению переменной name из окружения\r",
							"let reqvdata = request.data;\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"3. Check значение поля name = значению переменной name из окружения\", function () {\r",
							"    pm.expect(reqvdata.name).to.eql(response['name'])\r",
							"});\r",
							"\r",
							"// 4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"pm.test(\"4. Check значение поля age в ответе соответствует отправленному в запросе значению поля age\", function () {\r",
							"    pm.expect(response.age).to.eql(reqvdata.age)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 6) http://162.55.220.72:5005/currency\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"\r",
							"// Тесты:\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"let response = pm.response.json();\r",
							"\r",
							"let response_length = response.length;\r",
							"//console.log('response_length =', response_length);\r",
							"\r",
							"function getRandomIntInclusive(response_length) {\r",
							"  return Math.floor(Math.random() * response_length);\r",
							"};\r",
							"//console.log(getRandomIntInclusive(response_length))\r",
							"\r",
							"curr_code = response[getRandomIntInclusive(response_length)];\r",
							"//console.log('curr_code =', curr_code.Cur_ID)\r",
							"pm.environment.set('curr_code', curr_code.Cur_ID)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 7) http://162.55.220.72:5005/curr_byn\r",
							"// req.\r",
							"// POST\r",
							"// auth_token\r",
							"// curr_code: int\r",
							"\r",
							"// Тесты:\r",
							"// 1) Статус код 200\r",
							"\r",
							"pm.test(\"1. Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"\t\"required\": [\r",
							"\t\t\"Cur_Abbreviation\",\r",
							"\t\t\"Cur_ID\",\r",
							"\t\t\"Cur_Name\",\r",
							"\t\t\"Cur_OfficialRate\",\r",
							"\t\t\"Cur_Scale\",\r",
							"\t\t\"Date\"\r",
							"\t],\r",
							"\t\"properties\": {\r",
							"\t\t\"Cur_Abbreviation\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Abbreviation\", \r",
							"\t\t\t\"title\": \"Cur_abbreviation\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"SGD\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_ID\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_ID\", \r",
							"\t\t\t\"title\": \"Cur_id\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t421\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Cur_Name\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Name\", \r",
							"\t\t\t\"title\": \"Cur_name\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"Сингапурcкий доллар\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t},\r",
							"\t\t\"Cur_OfficialRate\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_OfficialRate\", \r",
							"\t\t\t\"title\": \"Cur_officialrate\", \r",
							"\t\t\t\"type\": \"number\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1.8006\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0.0\r",
							"\t\t},\r",
							"\t\t\"Cur_Scale\": {\r",
							"\t\t\t\"$id\": \"#root/Cur_Scale\", \r",
							"\t\t\t\"title\": \"Cur_scale\", \r",
							"\t\t\t\"type\": \"integer\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t1\r",
							"\t\t\t],\r",
							"\t\t\t\"default\": 0\r",
							"\t\t},\r",
							"\t\t\"Date\": {\r",
							"\t\t\t\"$id\": \"#root/Date\", \r",
							"\t\t\t\"title\": \"Date\", \r",
							"\t\t\t\"type\": \"string\",\r",
							"\t\t\t\"default\": \"\",\r",
							"\t\t\t\"examples\": [\r",
							"\t\t\t\t\"2021-10-31T00:00:00\"\r",
							"\t\t\t],\r",
							"\t\t\t\"pattern\": \"^.*$\"\r",
							"\t\t}\r",
							"\t}\r",
							"}\r",
							"\r",
							"pm.test(\"2. Check структура json в ответе\", () =>  {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "salary",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "weight",
			"value": ""
		},
		{
			"value": ""
		},
		{
			"value": ""
		}
	]
}